  async ${targetObjName}(obj, args, context, ast) {
    if (obj.${targetObjName} !== void 0) {
      await processHook(hooksObj, "${targetTypeName}", "adjustResults", [obj.${targetObjName}]);
      cleanUpResults([obj.${targetObjName}], ${targetTypeName}Metadata)
      return obj.${targetObjName};
    }

    let dataLoaderName = dataLoaderId(ast);
    if (context[dataLoaderName] == null) {
      let db = await context.__mongodb;
      context[dataLoaderName] = new DataLoader(async keys => {
        let $match = { ${keyField}: { $in: keys.filter(id => id).map(${idMapping}) } };
        let queryPacket = decontructGraphqlQuery(args, ast, ${targetTypeName}Metadata, null${receivingKeyForce});
        let { $project, $sort, $limit, $skip } = queryPacket;

        let aggregateItems = [{ $match }, { $project }];
        let results = await dbHelpers.runQuery(db, "${table}", aggregateItems);
        cleanUpResults(results, ${targetTypeName}Metadata);

        let destinationMap = new Map([]);
        for (let result of results) {
          destinationMap.set("" + result.${keyField}, result);
        }
        let finalResult = keys.map(id => destinationMap.get("" + id) || null);
        await processHook(hooksObj, "${targetTypeName}", "adjustResults", finalResult);
        return finalResult;
      });
    }
    return obj.${fkField} == null ? null : context[dataLoaderName].load(obj.${fkField});
  }