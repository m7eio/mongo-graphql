  async ${targetObjName}(obj, args, context, ast) {
    if (obj.${targetObjName}) {
      await processHook(hooksObj, "${targetTypeName}", "adjustResults", obj.${targetObjName});
      return cleanUpResults(obj.${targetObjName}, ${targetTypeName}Metadata);
    }
 
    let dataLoaderName = dataLoaderId(ast);
    if (context[dataLoaderName] == null) {
      let db = await context.__mongodb;
      context[dataLoaderName] = new DataLoader(async keys => {
        let $match = { ${keyField}: { $in: keys.filter(id => id).map(${idMapping}) } };
        let queryPacket = decontructGraphqlQuery(args, ast, ${targetTypeName}Metadata, null${receivingKeyForce});
        let { $project, $sort, $limit, $skip } = queryPacket;
        
        let aggregateItems = [{ $match }, $sort ? { $sort } : null, { $project }].filter(item => item);
        let results = await dbHelpers.runQuery(db, "${table}", aggregateItems);
        cleanUpResults(results, ${targetTypeName}Metadata);
        let finalResult = keys.map(keyArr => []);
        
        let keyLookup = new Map([]);
        for (let i = 0; i < keys.length; i++) {
          keyLookup.set("" + keys[i], finalResult[i]);
        }
        for (let result of results){
          let resultEntry = keyLookup.get(result.${keyField});
          if (resultEntry){
            resultEntry.push(result);
          }
        }
        for (let items of finalResult) {
          await processHook(hooksObj, "${targetTypeName}", "adjustResults", items);
        }
        return finalResult;
      });
    }
    return context[dataLoaderName].load(obj.${fkField} || []);
  }